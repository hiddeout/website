"use client"

import { useEffect, useState } from 'react'
import useAxios from 'axios-hooks'
import { HiCheckCircle } from 'react-icons/hi'
import { FiAlertTriangle } from 'react-icons/fi'
import { Area, AreaChart, CartesianGrid, XAxis, YAxis, ResponsiveContainer } from "recharts"
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "@/components/ui/card"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import {
  ChartConfig,
  ChartContainer,
  ChartLegend,
  ChartLegendContent,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart"

interface ShardData {
  id: string
  guilds: string
  users: string
  ping: string
  uptime: string
}

interface ApiResponse {
  shards: ShardData[]
  bot: {
    uptime: number
    status_history: Array<{
      date: string
      incidents: any[]
      completion: number
    }>
  }
  system: {
    cpu: {
      current: number
      history: Array<{ timestamp: number; value: number }>
    }
    memory: {
      current: number
      history: Array<{ timestamp: number; value: number }>
    }
    latency: {
      current: number
      history: Array<{ timestamp: number; value: number }>
    }
  }
  incidents: any[]
}

const MetricCard = ({ title, value, unit }: { title: string; value: number | string; unit: string }) => (
  <div className="bg-stmp-200 rounded-xl p-6">
    <h3 className="text-lg font-semibold text-white mb-2">{title}</h3>
    <p className="text-2xl font-bold text-green-500">
      {typeof value === 'number' ? value.toFixed(1) : value}{unit}
    </p>
  </div>
)

const MetricChart = ({ 
  data, 
  dataKey, 
  color, 
  timeRange, 
  onTimeRangeChange 
}: { 
  data: any[]
  dataKey: string
  color: string
  timeRange: string
  onTimeRangeChange: (value: string) => void
}) => {
  const chartConfig = {
    [dataKey]: {
      label: dataKey.charAt(0).toUpperCase() + dataKey.slice(1),
      color: color,
    },
  } satisfies ChartConfig

  return (
    <Card>
      <CardHeader className="flex items-center gap-2 space-y-0 border-b py-5 sm:flex-row">
        <div className="grid flex-1 gap-1 text-center sm:text-left">
          <CardTitle>{dataKey.charAt(0).toUpperCase() + dataKey.slice(1)} Usage</CardTitle>
        </div>
        <Select value={timeRange} onValueChange={onTimeRangeChange}>
          <SelectTrigger className="w-[160px] rounded-lg sm:ml-auto">
            <SelectValue placeholder="Select range" />
          </SelectTrigger>
          <SelectContent className="rounded-xl">
            <SelectItem value="90d" className="rounded-lg">Last 3 months</SelectItem>
            <SelectItem value="30d" className="rounded-lg">Last 30 days</SelectItem>
            <SelectItem value="7d" className="rounded-lg">Last 7 days</SelectItem>
          </SelectContent>
        </Select>
      </CardHeader>
      <CardContent className="px-2 pt-4 sm:px-6 sm:pt-6">
        <ChartContainer
          config={chartConfig}
          className="aspect-auto h-[250px] w-full"
        >
          <AreaChart data={data}>
            <defs>
              <linearGradient id={`fill${dataKey}`} x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor={color} stopOpacity={0.8} />
                <stop offset="95%" stopColor={color} stopOpacity={0.1} />
              </linearGradient>
            </defs>
            <CartesianGrid vertical={false} />
            <XAxis
              dataKey="date"
              tickLine={false}
              axisLine={false}
              tickMargin={8}
              minTickGap={32}
              tickFormatter={(value) => {
                const date = new Date(value)
                return date.toLocaleDateString("en-US", {
                  month: "short",
                  day: "numeric",
                })
              }}
            />
            <ChartTooltip
              cursor={false}
              content={
                <ChartTooltipContent
                  labelFormatter={(value) => {
                    return new Date(value).toLocaleDateString("en-US", {
                      month: "short",
                      day: "numeric",
                    })
                  }}
                  indicator="dot"
                />
              }
            />
            <Area
              dataKey="value"
              type="natural"
              fill={`url(#fill${dataKey})`}
              stroke={color}
            />
            <ChartLegend content={<ChartLegendContent />} />
          </AreaChart>
        </ChartContainer>
      </CardContent>
    </Card>
  )
}

export default function Status() {
  const [{ data, loading, error }] = useAxios<ApiResponse>({
    baseURL: "https://api.stmp.dev",
    url: "/status",
    refreshInterval: 30000
  })

  const [timeRange, setTimeRange] = useState("7d")
  const [metrics, setMetrics] = useState({
    totalUsers: 0,
    totalGuilds: 0,
    shardCount: 0,
    averageLatency: 0,
    cpuUsage: 0,
    memoryUsage: 0,
    botUptime: 100
  })

  const [chartData, setChartData] = useState<{
    latency: { date: string; value: number }[]
    cpu: { date: string; value: number }[]
    memory: { date: string; value: number }[]
  }>({
    latency: [],
    cpu: [],
    memory: []
  })

  useEffect(() => {
    if (data) {
      // Update metrics
      const totalUsers = data.shards.reduce((sum, shard) => 
        sum + parseInt(shard.users || '0'), 0)
      
      const totalGuilds = data.shards.reduce((sum, shard) => 
        sum + parseInt(shard.guilds || '0'), 0)

      setMetrics({
        totalUsers,
        totalGuilds,
        shardCount: data.shards.length,
        averageLatency: data.system.latency.current,
        cpuUsage: data.system.cpu.current,
        memoryUsage: data.system.memory.current,
        botUptime: data.bot.uptime
      })

      // Update chart data
      const days = timeRange === '7d' ? 7 : timeRange === '30d' ? 30 : 90
      
      setChartData({
        latency: data.system.latency.history.slice(-days).map(h => ({
          date: new Date(h.timestamp).toISOString(),
          value: h.value
        })),
        cpu: data.system.cpu.history.slice(-days).map(h => ({
          date: new Date(h.timestamp).toISOString(),
          value: h.value
        })),
        memory: data.system.memory.history.slice(-days).map(h => ({
          date: new Date(h.timestamp).toISOString(),
          value: h.value
        }))
      })
    }
  }, [data, timeRange])

  const getStatusColor = (uptime: number) => 
    uptime >= 99 ? 'green' : uptime >= 95 ? 'yellow' : 'red'

  if (error) {
    return (
      <div className="pt-20 mx-10 text-center">
        <FiAlertTriangle className="text-red-500 text-4xl mx-auto mb-4" />
        <h2 className="text-xl font-bold text-white">Failed to load status data</h2>
      </div>
    )
  }

  return (
    <main className="pt-20 mx-10">
      <section className="max-w-5xl mx-auto w-full pb-20">
        {/* Status Overview */}
        <div className="bg-stmp-200 rounded-xl p-6 mb-8">
          <div className="flex items-center gap-2 mb-4">
            <HiCheckCircle className={`text-${getStatusColor(metrics.botUptime)}-500 text-2xl`} />
            <h2 className="text-xl font-bold text-white">
              {metrics.botUptime >= 95 ? 'All Systems Operational' : 'Partial System Outage'}
            </h2>
          </div>
          <div className="flex gap-4">
            <button className="text-stmp-main hover:text-white transition-colors">
              Report an issue
            </button>
            <button className="text-stmp-main hover:text-white transition-colors">
              Get updates
            </button>
          </div>
        </div>

        {/* System Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <MetricCard title="CPU Usage" value={metrics.cpuUsage} unit="%" />
          <MetricCard title="Memory Usage" value={metrics.memoryUsage} unit="%" />
          <MetricCard title="Average Latency" value={metrics.averageLatency} unit="ms" />
        </div>

        {/* Charts */}
        <div className="grid gap-6 mb-8">
          <MetricChart
            data={chartData.latency}
            dataKey="latency"
            color="#3b82f6"
            timeRange={timeRange}
            onTimeRangeChange={setTimeRange}
          />
          <MetricChart
            data={chartData.cpu}
            dataKey="cpu"
            color="#10b981"
            timeRange={timeRange}
            onTimeRangeChange={setTimeRange}
          />
          <MetricChart
            data={chartData.memory}
            dataKey="memory"
            color="#8b5cf6"
            timeRange={timeRange}
            onTimeRangeChange={setTimeRange}
          />
        </div>

        {/* Cluster Stats */}
        <div className="bg-stmp-200 rounded-xl p-6 mb-8">
          <h3 className="text-lg font-semibold text-white mb-4">Cluster Status</h3>
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {data?.shards.map((shard) => (
              <div key={shard.id} className="bg-stmp-300 rounded-lg p-4 flex items-center justify-between">
                <div>
                  <span className="text-white">Shard {shard.id}</span>
                  <p className="text-sm text-stmp-main">
                    {parseInt(shard.guilds).toLocaleString()} guilds â€¢ {parseInt(shard.users).toLocaleString()} users
                  </p>
                </div>
                <div className={`w-3 h-3 rounded-full ${
                  parseFloat(shard.ping) < 1000 ? 'bg-green-500' : 'bg-yellow-500'
                }`} />
              </div>
            ))}
          </div>
        </div>

        {/* Uptime History */}
        <div className="bg-stmp-200 rounded-xl p-6">
          <h3 className="text-lg font-semibold text-white mb-4">Uptime History</h3>
          <div className="flex gap-0.5">
            {data?.bot?.status_history?.slice(-90).map((day, i) => (
              <div 
                key={i}
                className={`flex-1 h-8 ${day.completion > 0 ? 'bg-emerald-500' : 'bg-gray-800'}`}
                title={`${day.date}: ${day.completion}% uptime`}
              />
            ))}
          </div>
        </div>
      </section>
    </main>
  )
}